buildscript {
  ext.getExtOrDefault = {name ->
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['Vosk_' + name]
  }

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:8.7.2"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${getExtOrDefault('kotlinVersion')}"
  }
}


apply plugin: "com.android.library"
apply plugin: "kotlin-android"

apply plugin: "com.facebook.react"

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["_" + name]).toInteger()
}

android {
  
    namespace "com.vosk"

    compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
  }

  buildFeatures {
    buildConfig true
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  sourceSets {
    main {
      assets.srcDirs += [
        "$buildDir/generated/assets"
      ]
      java.srcDirs += [
        "generated/java",
        "generated/jni"
      ]
    }
  }
}

repositories {
  mavenCentral()
  google()
}

// Generate UUIDs for each model directory.
// Priority order:
//  1. If Gradle property 'Vosk_models' is set (comma separated list of relative paths), use those.
//  2. Otherwise fallback to scanning an adjacent app assets directory for model* folders.
tasks.register('genUUID') {
  doLast {
    def modelsProp = project.findProperty('Vosk_models')
    if (modelsProp) {
      println "[react-native-vosk] Using Vosk_models property: ${modelsProp}"
      def modelPaths = modelsProp.split(',').collect { it.trim() }.findAll { it }
      if (modelPaths.isEmpty()) {
        println '[react-native-vosk] Vosk_models is empty, skipping.'
        return
      }
      modelPaths.each { relPath ->
        def candidates = [
          file("${rootProject.projectDir}/${relPath}"),
          file("${rootProject.projectDir.parentFile}/${relPath}")
        ]
        def fullPath = candidates.find { it.exists() }
        if (!fullPath) {
          println "[react-native-vosk] Warning: model path not found (tried): ${candidates}"
          return
        }
        if (!fullPath.isDirectory()) {
          println "[react-native-vosk] Warning: not a directory: ${fullPath}"
          return
        }
        def modelName = fullPath.name
        println "[react-native-vosk] Processing model: ${fullPath}"
        def androidOutDir = file("$buildDir/generated/assets/${modelName}")
        mkdir androidOutDir
        copy { from fullPath; into androidOutDir }
        def outFile = file("$androidOutDir/uuid")
        outFile.text = UUID.randomUUID().toString()
        println "[react-native-vosk] Generated UUID for ${modelName}: ${outFile.text}"
      }
      return
    }

    // Fallback scanning behaviour (original implementation)
    def androidAppDir = rootDir.toPath().parent.toFile()
    def srcDir = file("$androidAppDir/assets")
    println "[react-native-vosk] Vosk_models not set, scanning in: $srcDir"
    fileTree(dir: "$srcDir", exclude: ['*/*']).visit { fileDetails ->
      if (fileDetails.directory && fileDetails.file.name.startsWith('model')) {
        def outDir = file("$srcDir/$fileDetails.relativePath")
        println "[react-native-vosk] Processing model (scan): $outDir"
        def androidOutDir = file("$buildDir/generated/assets/$fileDetails.relativePath")
        mkdir androidOutDir
        copy { from outDir; into androidOutDir }
        def outFile = file("$androidOutDir/uuid")
        outFile.text = UUID.randomUUID().toString()
        println "[react-native-vosk] Generated UUID for ${fileDetails.relativePath}: ${outFile.text}"
      }
    }
  }
}
preBuild.dependsOn genUUID

def kotlin_version = getExtOrDefault("kotlinVersion")

dependencies {
  implementation "com.facebook.react:react-android"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  // From node_modules
  implementation 'net.java.dev.jna:jna:5.17.0@aar'
  implementation 'com.alphacephei:vosk-android:0.3.70@aar'
}

